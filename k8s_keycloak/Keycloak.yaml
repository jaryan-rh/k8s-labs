# scratch notes

Keycloak install from here: https://fabianlee.org/2022/09/10/kubernetes-keycloak-iam-deployed-into-kubernetes-cluster-for-oauth2-oidc/

SSL San info from here: https://stackoverflow.com/questions/64814173/how-do-i-use-sans-with-openssl-instead-of-common-name

User Kubeconfig hints here: https://medium.com/@int128/kubectl-with-openid-connect-43120b451672


## Setup keycloak

You need to generate some SSL certs for Keycloak. Here is a short script

```
cat << EOL > selfsigned_openssl.sh
#!/bin/bash

FQDN="\$1"
[ -n "\$FQDN" ] || { echo "ERROR provide FQDN for self-signed cert"; exit 3; }

echo -------------------
echo FQDN is \$FQDN
echo -------------------

openssl req -x509 -nodes -days 3650 -newkey rsa:2048 \
-keyout /tmp/\$FQDN.key -out /tmp/\$FQDN.pem \
-subj "/C=US/ST=CA/L=SFO/O=myorg/CN=\$FQDN" \
-addext "subjectAltName = DNS:\$FQDN"

openssl x509 -in /tmp/\$FQDN.pem -text -noout | grep -E "Subject:|Not After :|DNS:|Issuer:"

echo ""
echo "public cert and private key are located in /tmp directory"

EOL
```

You can run the script and pass in your FQDN to have it create the certs

```
chmod +x selfsigned_openssl.sh
prefix=keycloak.k3s.lab
./selfsigned_openssl.sh $prefix
```

Add the certs into the ca-trust store:

```
cp /tmp/$prefix.{pem,key} /etc/pki/tls/certs/
cp /etc/kubernetes/pki/ca.crt /etc/pki/tls/certs/
update-ca-trust
```

Add the certs into a secret:

```
kubectl create -n default secret tls tls-credential --key=/tmp/$prefix.key --cert=/tmp/$prefix.pem
```

update the `kube-apiserver.yaml` file to include the OIDC information. This goes bleow the `--tls` options:

```
cat << EOL > temp_oidc_settings.txt
    - --oidc-issuer-url=https://keycloak.k3s.lab/realms/myrealm
    - --oidc-client-id=myclient
    - --oidc-username-claim=name
    - --oidc-groups-claim=groups
    - --oidc-ca-file=/etc/pki/tls/certs/keycloak.k3s.lab.pem
EOL


sed -i '/    - --tls-private-key-file=\/etc\/kubernetes\/pki\/apiserver.key/rtemp_oidc_settings.txt' /etc/kubernetes/manifests/kube-apiserver.yaml
```

Restart the services

```
systemctl restart crio && systemctl restart kubelet
```



Here is the keycloak ingress with HAProxy

```
cat << EOL > keycloak-ingress.yaml
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: haproxy
  labels:
    app: keycloak
  name: keycloak
spec:
  rules:
  - host: keycloak.k3s.lab
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: keycloak
            port:
              number: 8080
  tls:
  - hosts:
    - keycloak.k3s.lab
    secretName: tls-credential
 
EOL

```

Create the ingress:

```
kubectl create -f keycloak-ingress.yaml
```



Get the poststart script and the json files (replace the urls in the post file)

```
curl -s https://raw.githubusercontent.com/fabianlee/blogcode/master/keycloak/myclient.exported.json |sed "s/keycloak\.kubeadm\.local/$prefix/g" > myclient.exported.json

wget https://raw.githubusercontent.com/fabianlee/blogcode/master/keycloak/poststart.sh

kubectl create configmap keycloak-configmap --from-file=poststart.sh --from-file=myclient.exported.json
```

Here is the keycloak deployment it has a lifecycle hook to create users the first time:

```
cat << EOL > keycloak.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    app: keycloak
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: keycloak
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        lifecycle:
          postStart:
            exec:
              # lifecycle hook called right after container created, bash script has built-in delay
              command: ["/bin/bash","-c","cd /opt/keycloak/bin; ./poststart.sh > /tmp/poststart.log"]
        image: quay.io/keycloak/keycloak:20.0.1
        args: ["start-dev"]
        env:
        - name: KEYCLOAK_ADMIN
          value: "admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: "admin"
        - name: KC_PROXY
          value: "edge"
        ports:
        - name: http
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /realms/master
            port: 8080
        volumeMounts:
          - mountPath: /opt/keycloak/bin/poststart.sh
            subPath: poststart.sh
            name: keycloak-hookvolume
          - mountPath: /tmp/myclient.exported.json
            subPath: myclient.exported.json
            name: keycloak-hookvolume
      volumes:
      - name: keycloak-hookvolume
        configMap:
          name: keycloak-configmap
          defaultMode: 0755

EOL
```

Create the deployment and verify:

```
kubectl create -f keycloak.yaml

sleep 90

kubectl exec -it deployment/keycloak -n default -c keycloak -- cat /tmp/keycloak.properties
```

create the RBAC and make the user cluster-admin

```
cat << EOL > cluster-admin.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: oidc-admin-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: User
  name: "https://keycloak.k3s.lab/realms/myrealm#first last"

EOL

kubectl create -f cluster-admin.yaml
```

> If you try a kubectl command without the above you will get output similar to the following:
>```
>Error from server (Forbidden): pods is forbidden: User "https://keycloak.k3s.lab/realms/myrealm#first last" cannot list resource "pods" in API group "" in the namespace "default"
>```
{.is-info}



Verify group

```
kubectl get clusterrolebindings -o go-template='{{range .items}}{{range .subjects}}{{.kind}}-{{.name}} {{end}} {{" - "}} {{.metadata.name}} {{"\n"}}{{end}}' | grep "^Group-system:masters"

```



Instal cli web browser

```
subscription-manager repos --enable=codeready-builder-for-rhel-8-x86_64-rpms
dnf install lynx -y
```

Create the user kubeconfig

```
mkdir ~/.kube

cat << EOL > ~/.kube/config
apiVersion: v1
clusters:
- cluster:
    server: https://192.168.99.45:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: myuser
kind: Config
users:
- name: myuser
  user:

EOL
```

As a regular user:

```
(
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install oidc-login

id_token=$(curl -k -d "grant_type=password" -d "scope=openid" -d "client_id=myclient" -d "client_secret=RvNAQycq2KOrWaGVuaoHBwPgfEOwzPi2" -d "username=myuser" -d "password=Password1!" https://keycloak.k3s.lab/realms/myrealm/protocol/openid-connect/token |jq .id_token)

refresh_token=$(curl -k -d "grant_type=password" -d "scope=openid" -d "client_id=myclient" -d "client_secret=RvNAQycq2KOrWaGVuaoHBwPgfEOwzPi2" -d "username=myuser" -d "password=Password1!" https://keycloak.k3s.lab/realms/myrealm/protocol/openid-connect/token |jq .refresh_token)

kubectl config set-credentials myuser "--auth-provider=oidc" \
"--auth-provider-arg=idp-issuer-url=https://keycloak.k3s.lab/realms/myrealm" \
"--auth-provider-arg=client-id=myclient" \
"--auth-provider-arg=client-secret=RvNAQycq2KOrWaGVuaoHBwPgfEOwzPi2" \
"--auth-provider-arg=refresh-token=$(sed -e 's/^"//' -e 's/"$//' <<<$refresh_token)" \
"--auth-provider-arg=id-token=$(sed -e 's/^"//' -e 's/"$//' <<<$id_token)"
```
